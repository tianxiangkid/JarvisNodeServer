{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Dragger","Upload","App","props","handleChange","info","file","originFileObj","console","log","status","fileList","message","success","name","error","onProgress","e","percent","toFixed","fileName","setState","state","style","base","position","width","height","main","fontSize","margin","textAlign","left","top","right","bottom","progress","hight","propsDragger","action","multiple","showUploadList","onChange","this","propsProgress","type","className","Component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6UAMMA,G,OAAUC,IAAOD,SAiGRE,E,YA9FX,WAAYC,GAAQ,IAAD,8BACf,4CAAMA,KAOVC,aAAe,SAACC,GACZ,IAAMC,EAAOD,EAAKC,KAAKC,cACvBC,QAAQC,IAAIH,GAIZ,IAAMI,EAASL,EAAKC,KAAKI,OACV,cAAXA,GACAF,QAAQC,IAAIJ,EAAKC,KAAMD,EAAKM,UAEjB,SAAXD,EACAE,IAAQC,QAAR,UAAmBR,EAAKC,KAAKQ,KAA7B,iCACkB,UAAXJ,GACPE,IAAQG,MAAR,UAAiBV,EAAKC,KAAKQ,KAA3B,0BArBW,EAwBnBE,WAAa,SAACC,EAAGX,GACb,IAAIY,EAAUD,EAAEC,QAAQC,QAAQ,GAC5BC,EAAWd,EAAKQ,KACpBN,QAAQC,IAAI,cAAeS,GAC3BV,QAAQC,IAAI,WAAYW,GACxB,EAAKC,SAAS,CAACH,YACf,EAAKG,SAAS,CAACD,cA5Bf,EAAKE,MAAQ,CACTX,SAAU,IAEd,EAAKL,KAAO,KALG,E,sEAkCf,IAAMiB,EAAQ,CACVC,KAAM,CACFC,SAAU,WACVC,MAAO,OACPC,OAAQ,SAEZC,KAAM,CACFC,SAAU,OACVJ,SAAU,WACVK,OAAQ,OACRJ,MAAO,OACPK,UAAW,SACXC,KAAM,IACNC,IAAK,IACLC,MAAO,IACPC,OAAQ,OAEZC,SAAU,CACNP,SAAU,OACVC,OAAQ,OACRC,UAAW,SACXC,KAAM,MACNN,MAAO,QACPW,MAAO,UAGTC,EAAe,CACjBxB,KAAM,OAENyB,OAAQ,cACRC,UAAU,EACVC,gBAAgB,EAChBC,SAAUC,KAAKvC,aACfY,WAAY2B,KAAK3B,WACjBW,OAAQ,KAGNiB,EAAgB,CAClB1B,QAASyB,KAAKrB,MAAMJ,QACpB2B,KAAM,UAGV,OACI,yBAAKC,UAAU,MAAMvB,MAAOA,EAAMC,MAC9B,kBAACxB,EAAD,iBAAasC,EAAb,CAA2Bf,MAAOA,EAAMK,OACpC,wNACA,uBAAGkB,UAAU,wBACT,kBAAC,IAAD,CAAMD,KAAK,WAEf,iGACA,qIAGA,kBAAC,IAAD,iBAAcD,EAAd,CAA6BrB,MAAOA,EAAMa,kB,GAxF5CW,aCIEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.72e65b64.chunk.js","sourcesContent":["import React, {Component} from 'react'\nimport './App.css'\nimport {Upload, Icon, message, Progress} from 'antd'\nimport axios from 'axios'\nimport {UploadFile} from \"antd/lib/upload/interface\"\n\nconst Dragger = Upload.Dragger\n\nclass App extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            fileList: [],\n        }\n        this.file = null\n    }\n\n    handleChange = (info) => {\n        const file = info.file.originFileObj\n        console.log(file)\n        // axios.post('http://localhost:3000/api/upload', {\n        //   file: file\n        // })\n        const status = info.file.status\n        if (status !== 'uploading') {\n            console.log(info.file, info.fileList)\n        }\n        if (status === 'done') {\n            message.success(`${info.file.name} file uploaded successfully.`)\n        } else if (status === 'error') {\n            message.error(`${info.file.name} file upload failed.`)\n        }\n    }\n    onProgress = (e, file) => {\n        var percent = e.percent.toFixed(2)\n        var fileName = file.name\n        console.log(\"percent: %s\", percent)\n        console.log(\"file: %s\", fileName)\n        this.setState({percent})\n        this.setState({fileName})\n    }\n\n    render() {\n        const style = {\n            base: {\n                position: 'absolute',\n                width: '100%',\n                height: '100vh',\n            },\n            main: {\n                fontSize: '120%',\n                position: 'absolute',\n                margin: 'auto',\n                width: '100%',\n                textAlign: 'center',\n                left: '0',\n                top: '0',\n                right: '0',\n                bottom: '30%',\n            },\n            progress: {\n                fontSize: '120%',\n                margin: 'auto',\n                textAlign: 'center',\n                left: '45%',\n                width: '120px',\n                hight: '120px',\n            },\n        }\n        const propsDragger = {\n            name: 'file',\n            // action: '/api/upload',\n            action: '/api/upload',\n            multiple: true,\n            showUploadList: false,\n            onChange: this.handleChange,\n            onProgress: this.onProgress,\n            height: 100,\n            // customRequest: this.customRequest\n        }\n        const propsProgress = {\n            percent: this.state.percent,\n            type: \"circle\",\n            // customRequest: this.customRequest\n        }\n        return (\n            <div className=\"App\" style={style.base}>\n                <Dragger {...propsDragger} style={style.main}>\n                    <p>这是antd的上传组件，可以支持拖动上传，选择文件后 自动发起上传请求</p>\n                    <p className=\"ant-upload-drag-icon\">\n                        <Icon type=\"inbox\"/>\n                    </p>\n                    <p>点击或者拖动文件到此处</p>\n                    <p>Support for a single or bulk upload. Strictly prohibit from uploading\n                        company\n                        data or other band files</p>\n                    <Progress {...propsProgress} style={style.progress}/>\n                </Dragger>\n            </div>\n        )\n    }\n}\n\nexport default App","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}